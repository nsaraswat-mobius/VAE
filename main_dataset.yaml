name: Load Failure Signature Data
description: Fetches failure signature JSON data from a specified API URL for VAE processing.
inputs:
  - {name: api_url, type: String, description: 'The complete API URL to fetch failure signature data from.'}
  - {name: token, type: string, description: 'Bearer token for authentication.'}
outputs:
  - {name: json_data, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet requests pandas torch numpy || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet requests pandas torch numpy --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import json
        import os
        import requests
        import pickle

        def fetch_data_from_api(api_url, token):
            headers = {
                'Content-Type': 'application/json',
                'Authorization': f'Bearer {token}'
            }
            data = {
              "dbType": "TIDB",
              "ownedOnly": True,
              "filter": {}
            }
            
            print(f"Attempting to connect to: {api_url}")
            
            # Add timeout and retry logic
            import time
            max_retries = 3
            timeout = 30
            
            for attempt in range(max_retries):
                try:
                    print(f"Attempt {attempt + 1}/{max_retries}")
                    response = requests.post(api_url, headers=headers, data=json.dumps(data), timeout=timeout)
                    print(f"Response status: {response.status_code}")
                    response.raise_for_status()
                    return response.json()
                except requests.exceptions.ConnectTimeout:
                    print(f"Connection timeout on attempt {attempt + 1}")
                    if attempt < max_retries - 1:
                        wait_time = (attempt + 1) * 5
                        print(f"Waiting {wait_time} seconds before retry...")
                        time.sleep(wait_time)
                    else:
                        raise
                except requests.exceptions.ConnectionError as e:
                    print(f"Connection error on attempt {attempt + 1}: {e}")
                    if attempt < max_retries - 1:
                        wait_time = (attempt + 1) * 5
                        print(f"Waiting {wait_time} seconds before retry...")
                        time.sleep(wait_time)
                    else:
                        raise
                except Exception as e:
                    print(f"Unexpected error: {e}")
                    raise

        parser = argparse.ArgumentParser()
        parser.add_argument('--api_url', type=str, required=True)
        parser.add_argument('--token', type=str, required=True)
        parser.add_argument('--json_data', type=str, required=True)
        args = parser.parse_args()
        with open(args.token, 'r') as f:
            token = f.read().strip()
        print(f"Fetching failure signature data from: {args.api_url}")
        data = fetch_data_from_api(args.api_url, token)

        os.makedirs(os.path.dirname(args.json_data), exist_ok=True)
        with open(args.json_data, "wb") as f:
            pickle.dump(data, f)

        print(f"Saved failure signature data to {args.json_data}")
        print(f"Length of failure signature data: {len(data)}")
    args:
      - --api_url
      - {inputValue: api_url}
      - --token
      - {inputPath: token}
      - --json_data
      - {outputPath: json_data}
