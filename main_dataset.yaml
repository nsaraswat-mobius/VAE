name: Load Failure Signature Data
description: Fetches failure signature JSON data from a specified API URL for VAE processing.
inputs:
  - {name: api_url, type: String, description: 'The complete API URL to fetch failure signature data from.'}
  - {name: token, type: string, description: 'Bearer token for authentication.'}
outputs:
  - {name: json_data, type: Dataset}
implementation:
  container:
    image: python:3.9
    command:
      - sh
      - -c
      - |
        python3 -m pip install --quiet requests pandas torch numpy || \
        python3 -m pip install --quiet requests pandas torch numpy --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import json
        import os
        import requests
        import pickle
        from requests.adapters import HTTPAdapter
        from urllib3.util.retry import Retry
        import logging

        parser = argparse.ArgumentParser()
        parser.add_argument('--api_url', type=str, required=True)
        parser.add_argument('--token', type=str, required=True)
        parser.add_argument('--json_data', type=str, required=True)
        args = parser.parse_args()

        with open(args.token, 'r') as f:
            access_token = f.read().strip()
        
        # Setup retry logger
        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger("api_retry")

        # Setup session with retry logic
        session = requests.Session()
        retries = Retry(
            total=5,                # total retries
            backoff_factor=1,       # wait 1s, 2s, 4s
            status_forcelist=[500, 502, 503, 504],
            allowed_methods=["POST"]
        )
        adapter = HTTPAdapter(max_retries=retries)
        session.mount("http://", adapter)
        session.mount("https://", adapter)

        # Fetch dataset from API with retry + timeout
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {access_token}"
        }
        payload = {
            "dbType": "TIDB",
            "entityId": "",
            "entityIds": [],
            "ownedOnly": False,
            "projections": [],
            "filter": {},
            "startTime": 0,
            "endTime": 0
        }

        try:
            logger.info("Sending request to API with retries enabled")
            print(f"Fetching failure signature data from: {args.api_url}")
            resp = session.post(args.api_url, headers=headers, json=payload, timeout=30)
            resp.raise_for_status()
            data = resp.json()
            print(f"Successfully fetched data. Response status: {resp.status_code}")
        except requests.exceptions.RequestException as e:
            logger.error(f"API request failed after retries: {e}")
            print(f"Failed to fetch data: {e}")
            raise

        os.makedirs(os.path.dirname(args.json_data), exist_ok=True)
        with open(args.json_data, "wb") as f:
            pickle.dump(data, f)

        print(f"Saved failure signature data to {args.json_data}")
        print(f"Length of failure signature data: {len(data)}")
    args:
      - --api_url
      - {inputValue: api_url}
      - --token
      - {inputPath: token}
      - --json_data
      - {outputPath: json_data}
