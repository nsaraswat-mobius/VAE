name: Preprocess VAE Dataset
description: Takes raw image data from DataLoaders, applies VAE-specific preprocessing, and outputs processed DataLoaders with metadata for all VAE types (Standard, Beta, Conditional, VQ-VAE).
inputs:
  - {name: train_data, type: Dataset, description: "Training data loader pickle file from data loader component"}
  - {name: val_data, type: Dataset, description: "Validation data loader pickle file from data loader component"}
  - {name: data_shape, type: String, description: "Data shape from data loader component (height,width,channels)"}
  - {name: vae_type, type: String, default: "standard", description: "Type of VAE: standard, beta, conditional, vqvae"}
  - {name: preprocessing_config, type: String, default: "{}", description: "JSON string with preprocessing configuration"}
outputs:
  - {name: processed_train_data, type: Dataset, description: "Processed training DataLoader"}
  - {name: processed_val_data, type: Dataset, description: "Processed validation DataLoader"}
  - {name: processed_data_shape, type: String, description: "Flattened input dimension for VAE"}
  - {name: preprocessing_metadata, type: Dataset, description: "Metadata about preprocessing operations"}
  - {name: class_mapping, type: String, description: "Class labels mapping JSON string for conditional VAE"}
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        pip install torch torchvision
        python3 -c "
        import argparse
        import os
        import pickle
        import torch
        import json
        from torch.utils.data import DataLoader, Dataset
        import logging

        logging.basicConfig(level=logging.INFO)
        logger = logging.getLogger(__name__)

        class ProcessedVAEDataset(Dataset):
            def __init__(self, original_loader, vae_type):
                self.data = []
                self.labels = []
                self.vae_type = vae_type
                
                for batch_data, batch_labels in original_loader:
                    flattened_data = batch_data.view(batch_data.size(0), -1)
                    self.data.append(flattened_data)
                    self.labels.append(batch_labels)
                
                self.data = torch.cat(self.data, dim=0)
                self.labels = torch.cat(self.labels, dim=0)
                
                self._apply_vae_preprocessing()
            
            def _apply_vae_preprocessing(self):
                global class_mapping
                class_mapping = {}
                
                if self.vae_type == 'standard':
                    if self.data.min() < 0:
                        self.data = (self.data + 1) / 2
                
                elif self.vae_type == 'beta':
                    if self.data.min() < 0:
                        self.data = (self.data + 1) / 2
                
                elif self.vae_type == 'conditional':
                    if self.data.min() < 0:
                        self.data = (self.data + 1) / 2
                    
                    unique_labels = torch.unique(self.labels)
                    class_mapping = {int(label): idx for idx, label in enumerate(unique_labels)}
                    
                    remapped_labels = torch.zeros_like(self.labels)
                    for original_label, new_label in class_mapping.items():
                        remapped_labels[self.labels == original_label] = new_label
                    self.labels = remapped_labels
                
                elif self.vae_type == 'vqvae':
                    if self.data.max() <= 1 and self.data.min() >= 0:
                        self.data = self.data * 2 - 1
            
            def __len__(self):
                return len(self.data)
            
            def __getitem__(self, idx):
                return self.data[idx], self.labels[idx]

        parser = argparse.ArgumentParser()
        parser.add_argument('--train_data', type=str, required=True)
        parser.add_argument('--val_data', type=str, required=True)
        parser.add_argument('--data_shape', type=str, required=True)
        parser.add_argument('--vae_type', type=str, required=True)
        parser.add_argument('--preprocessing_config', type=str, required=True)
        parser.add_argument('--processed_train_data', type=str, required=True)
        parser.add_argument('--processed_val_data', type=str, required=True)
        parser.add_argument('--processed_data_shape', type=str, required=True)
        parser.add_argument('--preprocessing_metadata', type=str, required=True)
        parser.add_argument('--class_mapping', type=str, required=True)
        args = parser.parse_args()

        with open(args.train_data, 'rb') as f:
            train_loader = pickle.load(f)
        with open(args.val_data, 'rb') as f:
            val_loader = pickle.load(f)
        
        class_mapping = {}
        
        processed_train_dataset = ProcessedVAEDataset(train_loader, args.vae_type)
        processed_val_dataset = ProcessedVAEDataset(val_loader, args.vae_type)
        
        original_batch_size = train_loader.batch_size
        processed_train_loader = DataLoader(processed_train_dataset, batch_size=original_batch_size, shuffle=True, num_workers=0)
        processed_val_loader = DataLoader(processed_val_dataset, batch_size=original_batch_size, shuffle=False, num_workers=0)
        
        h, w, c = map(int, args.data_shape.split(','))
        flattened_dim = h * w * c
        
        metadata = {
            'vae_type': args.vae_type,
            'flattened_input_dim': flattened_dim,
            'num_train_samples': len(processed_train_dataset),
            'num_val_samples': len(processed_val_dataset)
        }
        
        os.makedirs(os.path.dirname(args.processed_train_data) or '.', exist_ok=True)
        os.makedirs(os.path.dirname(args.processed_val_data) or '.', exist_ok=True)
        os.makedirs(os.path.dirname(args.processed_data_shape) or '.', exist_ok=True)
        os.makedirs(os.path.dirname(args.preprocessing_metadata) or '.', exist_ok=True)
        os.makedirs(os.path.dirname(args.class_mapping) or '.', exist_ok=True)
        
        with open(args.processed_train_data, 'wb') as f:
            pickle.dump(processed_train_loader, f)
        with open(args.processed_val_data, 'wb') as f:
            pickle.dump(processed_val_loader, f)
        with open(args.processed_data_shape, 'w') as f:
            f.write(str(flattened_dim))
        with open(args.preprocessing_metadata, 'wb') as f:
            pickle.dump(metadata, f)
        with open(args.class_mapping, 'w') as f:
            f.write(json.dumps(class_mapping))
        
        logger.info('VAE preprocessing completed successfully')
        " -- "$@"

    args:
      - --train_data
      - {inputPath: train_data}
      - --val_data
      - {inputPath: val_data}
      - --data_shape
      - {inputValue: data_shape}
      - --vae_type
      - {inputValue: vae_type}
      - --preprocessing_config
      - {inputValue: preprocessing_config}
      - --processed_train_data
      - {outputPath: processed_train_data}
      - --processed_val_data
      - {outputPath: processed_val_data}
      - --processed_data_shape
      - {outputPath: processed_data_shape}
      - --preprocessing_metadata
      - {outputPath: preprocessing_metadata}
      - --class_mapping
      - {outputPath: class_mapping}
