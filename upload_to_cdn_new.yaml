name: Generate Static VAE URLs
description: Generates static hardcoded URLs for VAE model, handler.py, and config files for KServe inference deployment.
inputs:
  - {name: trained_model, type: Model, description: "Trained VAE PyTorch model file (for validation only)"}
outputs:
  - {name: vae_model_url, type: String, description: "Static URL for trained_vae_model.pth"}
  - {name: handler_url, type: String, description: "Static URL for handler.py"}
  - {name: config_url, type: String, description: "Static URL for vae_config.properties"}
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import torch
        import sys
        from datetime import datetime
        
        parser = argparse.ArgumentParser()
        parser.add_argument('--trained_model', type=str, required=True)
        parser.add_argument('--vae_model_url', type=str, required=True)
        parser.add_argument('--handler_url', type=str, required=True)
        parser.add_argument('--config_url', type=str, required=True)
        
        args = parser.parse_args()
        
        print("Generating Static VAE URLs for KServe")
        print("Model path:", args.trained_model)
        
        # Static hardcoded URLs - modify these to point to your actual CDN/storage
        base_url = "https://your-cdn.com/vae-models/signature-failure"
        model_url = f"{base_url}/trained_vae_model.pth"
        handler_url = f"{base_url}/handler.py"
        config_url = f"{base_url}/vae_config.properties"
        
        try:
            # Handle model path - could be file or directory
            model_path = args.trained_model
            if os.path.isdir(model_path):
                # Look for .pth files in the directory
                pth_files = [f for f in os.listdir(model_path) if f.endswith('.pth')]
                if pth_files:
                    model_path = os.path.join(model_path, pth_files[0])
                    print(f"Found model file: {model_path}")
                else:
                    print(f"Warning: No .pth files found in {model_path}")
                    model_path = None
            
            # Validate model file if found
            if model_path and os.path.exists(model_path):
                try:
                    checkpoint = torch.load(model_path, map_location='cpu', weights_only=False)
                    print(" VAE model validation successful")
                    if 'model_state_dict' in checkpoint:
                        print(f"Model contains state_dict with {len(checkpoint['model_state_dict'])} parameters")
                    elif 'state_dict' in checkpoint:
                        print(f"Model contains state_dict with {len(checkpoint['state_dict'])} parameters")
                    else:
                        print("Model contains direct weights")
                except Exception as e:
                    print(f"Warning: Model validation failed: {str(e)}")
                    # Continue anyway - might be a custom format
            else:
                print("Warning: No valid model file found - continuing with URL generation")
            
            # Create output directories and write static URLs to output files
            print("Creating output directories...")
            
            # Create directories for each output
            os.makedirs(os.path.dirname(args.vae_model_url), exist_ok=True)
            os.makedirs(os.path.dirname(args.handler_url), exist_ok=True)
            os.makedirs(os.path.dirname(args.config_url), exist_ok=True)
            
            # Write URLs to files
            with open(args.vae_model_url, 'w') as f:
                f.write(model_url)
            print(f"✓ Model URL written to: {args.vae_model_url}")
            print(f"   Content: {model_url}")
            
            with open(args.handler_url, 'w') as f:
                f.write(handler_url)
            print(f"✓ Handler URL written to: {args.handler_url}")
            print(f"   Content: {handler_url}")
                
            with open(args.config_url, 'w') as f:
                f.write(config_url)
            print(f"✓ Config URL written to: {args.config_url}")
            print(f"   Content: {config_url}")
            
            # Also read back and verify the files
            print("")
            print(" VERIFYING OUTPUT FILES:")
            try:
                with open(args.vae_model_url, 'r') as f:
                    content = f.read().strip()
                    print(f"Model URL file contains: {content}")
                
                with open(args.handler_url, 'r') as f:
                    content = f.read().strip()
                    print(f"Handler URL file contains: {content}")
                    
                with open(args.config_url, 'r') as f:
                    content = f.read().strip()
                    print(f"Config URL file contains: {content}")
            except Exception as e:
                print(f"Warning: Could not verify files: {e}")
            
            print("=" * 80)
            print("STATIC VAE URLs GENERATED SUCCESSFULLY!")
            print("=" * 80)
            print("")
            print(" GENERATED URLs FOR KSERVE INFERENCE:")
            print("-" * 50)
            print(f" MODEL URL:")
            print(f"   {model_url}")
            print("")
            print(f" HANDLER URL:")
            print(f"   {handler_url}")
            print("")
            print(f" CONFIG URL:")
            print(f"   {config_url}")
            print("")
            print("=" * 80)
            print(" COPY THESE URLs FOR KSERVE DEPLOYMENT:")
            print("=" * 80)
            print("Model URL (for download component):")
            print(model_url)
            print("")
            print("Handler URL (for download component):")
            print(handler_url)
            print("")
            print("Config URL (for download component):")
            print(config_url)
            print("")
            print("=" * 80)
            print(" NEXT STEPS:")
            print("1. Copy the URLs above")
            print("2. Use them in your KServe inference pipeline")
            print("3. Make sure files are uploaded to these locations")
            print("=" * 80)
            
        except Exception as e:
            print(f"Failed to generate VAE URLs: {str(e)}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
    args:
      - --trained_model
      - {inputPath: trained_model}
      - --vae_model_url
      - {outputPath: vae_model_url}
      - --handler_url
      - {outputPath: handler_url}
      - --config_url
      - {outputPath: config_url}
