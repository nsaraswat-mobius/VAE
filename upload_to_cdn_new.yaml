name: Generate Static VAE URLs
description: Generates static hardcoded URLs for VAE model, handler.py, and config files for KServe inference deployment.
inputs:
  - {name: trained_model, type: Model, description: "Trained VAE PyTorch model file (for validation only)"}
outputs:
  - {name: vae_model_url, type: String, description: "Static URL for trained_vae_model.pth"}
  - {name: handler_url, type: String, description: "Static URL for handler.py"}
  - {name: config_url, type: String, description: "Static URL for vae_config.properties"}
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet torch --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import torch
        import sys
        from datetime import datetime
        
        parser = argparse.ArgumentParser()
        parser.add_argument('--trained_model', type=str, required=True)
        parser.add_argument('--vae_model_url', type=str, required=True)
        parser.add_argument('--handler_url', type=str, required=True)
        parser.add_argument('--config_url', type=str, required=True)
        
        args = parser.parse_args()
        
        print("Generating Static VAE URLs for KServe")
        print("Model path:", args.trained_model)
        
        # Static hardcoded URLs - modify these to point to your actual CDN/storage
        base_url = "https://your-cdn.com/vae-models/signature-failure"
        model_url = f"{base_url}/trained_vae_model.pth"
        handler_url = f"{base_url}/handler.py"
        config_url = f"{base_url}/vae_config.properties"
        
        try:
            # Validate model file exists (optional validation)
            if not os.path.exists(args.trained_model):
                raise FileNotFoundError(f"Model file not found: {args.trained_model}")
            
            # Validate model file format
            try:
                checkpoint = torch.load(args.trained_model, map_location='cpu', weights_only=False)
                print("âœ“ VAE model validation successful")
                if 'model_state_dict' in checkpoint:
                    print(f"Model contains state_dict with {len(checkpoint['model_state_dict'])} parameters")
                elif 'state_dict' in checkpoint:
                    print(f"Model contains state_dict with {len(checkpoint['state_dict'])} parameters")
                else:
                    print("Model contains direct weights")
            except Exception as e:
                print(f"Warning: Model validation failed: {str(e)}")
                # Continue anyway - might be a custom format
            
            # Write static URLs to output files
            with open(args.vae_model_url, 'w') as f:
                f.write(model_url)
            
            with open(args.handler_url, 'w') as f:
                f.write(handler_url)
                
            with open(args.config_url, 'w') as f:
                f.write(config_url)
            
            print("Static VAE URLs generated successfully!")
            print("URLs generated:")
            print(f"  Model: {model_url}")
            print(f"  Handler: {handler_url}")
            print(f"  Config: {config_url}")
            print("")
            print("Note: These are static URLs. Make sure your files are available at these locations:")
            print("- Upload your trained model to the model URL location")
            print("- Upload a KServe handler.py to the handler URL location") 
            print("- Upload a vae_config.properties to the config URL location")
            
        except Exception as e:
            print(f"Failed to generate VAE URLs: {str(e)}")
            import traceback
            traceback.print_exc()
            sys.exit(1)
    args:
      - --trained_model
      - {inputPath: trained_model}
      - --vae_model_url
      - {outputPath: vae_model_url}
      - --handler_url
      - {outputPath: handler_url}
      - --config_url
      - {outputPath: config_url}
