name: Initialize VAE Model
description: Initializes the VAE model for signature failure detection.
inputs:
  - {name: config, type: String}
outputs:
  - {name: model, type: Model}
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import json
        import os
        import pickle
        import sys
        
        from nesy_factory.VAE.standard_vae import StandardVAE
        from nesy_factory.VAE.beta_vae import BetaVAE
        from nesy_factory.VAE.conditional_vae import ConditionalVAE

        parser = argparse.ArgumentParser()
        parser.add_argument('--config', type=str, required=True)
        parser.add_argument('--model', type=str, required=True)
        args = parser.parse_args()

        config = json.loads(args.config)

        print(f"Received config: {json.dumps(config, indent=2)}")

        # Use processed_input_dim if available (after one-hot encoding), otherwise feature count
        if 'processed_input_dim' in config:
            input_dim = config['processed_input_dim']
        elif 'input_dim' in config:
            input_dim = config['input_dim']
        else:
            input_dim = len(config['feature_columns'])
        
        print(f"Using input_dim: {input_dim}")

        model_config = {
            'input_dim': input_dim,
            'latent_dim': config['latent_dim'],
            'hidden_dim': config['hidden_dim'],
            'num_layers': config['num_layers'],
            'dropout': config['dropout'],
            'optimizer': 'adam',
            'learning_rate': config['learning_rate'],
            'epochs': config['epochs'],
            'loss_function': 'ELBO'
        }

        model_type = config.get('model_type', 'StandardVAE')
        print(f"Model type: '{model_type}'")

        if model_type in ['StandardVAE', 'VAE', 'standard_vae', 'vae']:
            model_obj = StandardVAE(model_config)
            print("Initialized StandardVAE")
        elif model_type in ['BetaVAE', 'beta_vae']:
            model_obj = BetaVAE(model_config)
            print("Initialized BetaVAE")
        elif model_type in ['ConditionalVAE', 'conditional_vae', 'CVAE']:
            model_obj = ConditionalVAE(model_config)
            print("Initialized ConditionalVAE")
        else:
            raise ValueError(f"Invalid model type '{model_type}'. Use: StandardVAE, BetaVAE, or ConditionalVAE")

        os.makedirs(os.path.dirname(args.model), exist_ok=True)
        with open(args.model, "wb") as f:
            pickle.dump(model_obj, f)

        print(f"Saved model to {args.model}")
    args:
      - --config
      - {inputValue: config}
      - --model
      - {outputPath: model}
