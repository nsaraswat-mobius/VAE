name: Initialize VAE Model
description: Initializes the VAE model for failure signature anomaly detection with robust error handling.
inputs:
  - {name: config, type: String}
outputs:
  - {name: model, type: Model}
  - {name: model_config, type: String}  # Output the actual config used
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import json
        import os
        import pickle
        import sys
        from datetime import datetime
        
        # Import your VAE models here
        from nesy_factory.VAE.standard_vae import StandardVAE
        from nesy_factory.VAE.beta_vae import BetaVAE
        from nesy_factory.VAE.conditional_vae import ConditionalVAE

        def validate_config(config):
            # Check required parameters
            required = ['latent_dim', 'hidden_dim']
            for param in required:
                if param not in config:
                    raise ValueError(f"Missing required parameter: {param}")
            
            # Validate values
            if config['latent_dim'] <= 0:
                raise ValueError("latent_dim must be positive")
            if config['hidden_dim'] <= 0:
                raise ValueError("hidden_dim must be positive")
            if config['hidden_dim'] < config['latent_dim']:
                print("Warning: hidden_dim is smaller than latent_dim")
            
            # Validate model type
            valid_types = ['StandardVAE', 'VAE', 'BetaVAE', 'ConditionalVAE']
            model_type = config.get('model_type', 'VAE')
            if model_type not in valid_types:
                raise ValueError(f"Invalid model_type. Must be one of {valid_types}")
            
            return model_type

        def get_input_dimension(config):
            if 'processed_input_dim' in config:
                return config['processed_input_dim']
            elif 'actual_input_dim' in config:
                return config['actual_input_dim']
            else:
                raise ValueError(
                    "Cannot determine input dimension. "
                    "Please provide 'processed_input_dim' or 'actual_input_dim' in config"
                )

        parser = argparse.ArgumentParser()
        parser.add_argument('--config', type=str, required=True)
        parser.add_argument('--model', type=str, required=True)
        parser.add_argument('--model_config', type=str, required=True)
        args = parser.parse_args()

        try:
            # Parse and validate config
            config = json.loads(args.config)
            model_type = validate_config(config)
            input_dim = get_input_dimension(config)
            
            print(f"Using input dimension: {input_dim}")
            print(f"Model type: {model_type}")

            # Build complete model configuration
            model_config = {
                'input_dim': input_dim,
                'latent_dim': config['latent_dim'],
                'hidden_dim': config['hidden_dim'],
                'num_layers': config.get('num_layers', 2),
                'dropout': config.get('dropout', 0.1),
                'beta': config.get('beta', 1.0),
                'optimizer': 'adam',
                'learning_rate': config.get('learning_rate', 0.001),
                'epochs': config.get('epochs', 100),
                'loss_function': config.get('loss_function', 'ELBO'),
                'model_type': model_type
            }

            # Initialize appropriate VAE model
            if model_type in ['StandardVAE', 'VAE']:
                model_obj = StandardVAE(model_config)
            elif model_type == 'BetaVAE':
                model_obj = BetaVAE(model_config)
            elif model_type == 'ConditionalVAE':
                model_config['num_classes'] = config.get('num_classes', 10)
                model_obj = ConditionalVAE(model_config)

            # Save model and config
            os.makedirs(os.path.dirname(args.model), exist_ok=True)
            with open(args.model, "wb") as f:
                pickle.dump({
                    'model_obj': model_obj,
                    'model_config': model_config,
                    'metadata': {
                        'model_type': model_type,
                        'input_dim': input_dim,
                        'created_at': datetime.now().isoformat()
                    }
                }, f)

            # Save the configuration used
            with open(args.model_config, 'w') as f:
                json.dump(model_config, f, indent=2)

            print(f"Successfully initialized {model_type} with {sum(p.numel() for p in model_obj.parameters() if p.requires_grad)} parameters")
            
        except Exception as e:
            print(f"Error initializing VAE model: {e}")
            sys.exit(1)
    args:
      - --config
      - {inputValue: config}
      - --model
      - {outputPath: model}
      - --model_config
      - {outputPath: model_config}
