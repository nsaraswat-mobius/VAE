name: VAE CDN Download Files
description: Downloads handler.py, trained_vae_model.pth, and vae_config.properties files from CDN URLs for VAE signature failure inference and saves them locally with proper directory structure.
inputs:
  - {name: handler_url, type: String, description: "URL to fetch the VAE handler.py file from"}
  - {name: vae_model_url, type: String, description: "URL to fetch the trained_vae_model.pth model file from"}
  - {name: config_url, type: String, description: "URL to fetch the vae_config.properties file from"}
outputs:
  - {name: handler_file, type: String, description: "Downloaded VAE handler.py file"}
  - {name: vae_model_file, type: Model, description: "Downloaded trained_vae_model.pth model file"}
  - {name: config_file, type: String, description: "Downloaded vae_config.properties file"}
implementation:
  container:
    image: nikhilv215/nesy-factory:v22
    command:
      - sh
      - -c
      - |
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet requests || \
        PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet requests --user
        exec "$0" "$@"
      - python3
      - -u
      - -c
      - |
        import argparse
        import os
        import requests
        import torch
        
        parser = argparse.ArgumentParser()
        parser.add_argument('--handler_url', type=str, required=True)
        parser.add_argument('--handler_file', type=str, required=True)
        parser.add_argument('--vae_model_url', type=str, required=True)
        parser.add_argument('--vae_model_file', type=str, required=True)
        parser.add_argument('--config_url', type=str, required=True)
        parser.add_argument('--config_file', type=str, required=True)
        
        args = parser.parse_args()
        
        print("VAE Signature Failure CDN Download Started")
        print("Received handler_url:", args.handler_url)
        print("Received vae_model_url:", args.vae_model_url)
        print("Received config_url:", args.config_url)
        
        try:
            # Download VAE handler.py
            print("Fetching VAE handler.py from CDN:", args.handler_url)
            resp_handler = requests.get(args.handler_url, timeout=120)
            resp_handler.raise_for_status()
            
            os.makedirs(args.handler_file, exist_ok=True)
            handler_path = os.path.join(args.handler_file, 'handler.py')
            with open(handler_path, "w") as f:
                f.write(resp_handler.text)
            print("VAE Handler file saved at:", handler_path)
            print("Handler size:", len(resp_handler.text), "characters")
            
            # Download trained_vae_model.pth model file
            print("Fetching trained_vae_model.pth from CDN:", args.vae_model_url)
            resp_model = requests.get(args.vae_model_url, timeout=600)  # Extended timeout for model files
            resp_model.raise_for_status()
            
            os.makedirs(args.vae_model_file, exist_ok=True)
            model_path = os.path.join(args.vae_model_file, 'trained_vae_model.pth')
            with open(model_path, "wb") as f:
                f.write(resp_model.content)
            print("VAE model file saved at:", model_path)
            print("VAE model size:", len(resp_model.content), "bytes")
            
            # Validate PyTorch model file
            try:
                checkpoint = torch.load(model_path, map_location='cpu')
                print("VAE model validation successful - PyTorch checkpoint loaded")
                if 'model_state_dict' in checkpoint:
                    print("Model contains state_dict with keys:", list(checkpoint['model_state_dict'].keys())[:5])
                elif 'state_dict' in checkpoint:
                    print("Model contains state_dict with keys:", list(checkpoint['state_dict'].keys())[:5])
                else:
                    print("Model contains direct state dict with keys:", list(checkpoint.keys())[:5])
            except Exception as e:
                print("Warning: VAE model validation failed:", str(e))
            
            # Download vae_config.properties
            print("Fetching vae_config.properties from CDN:", args.config_url)
            resp_config = requests.get(args.config_url, timeout=120)
            resp_config.raise_for_status()
            
            os.makedirs(args.config_file, exist_ok=True)
            config_path = os.path.join(args.config_file, 'vae_config.properties')
            with open(config_path, "w") as f:
                f.write(resp_config.text)
            print("VAE config file saved at:", config_path)
            print("Config size:", len(resp_config.text), "characters")
            
            print("All VAE signature failure files downloaded successfully!")
            print("Output structure:")
            print("  - handler_file/handler.py (VAE inference handler)")
            print("  - vae_model_file/trained_vae_model.pth (VAE model weights)")
            print("  - config_file/vae_config.properties (VAE configuration)")
            
            # Verify files exist and have content
            if os.path.exists(handler_path) and os.path.getsize(handler_path) > 0:
                print("✓ VAE handler.py downloaded and verified")
            else:
                raise Exception("VAE handler.py download verification failed")
                
            if os.path.exists(model_path) and os.path.getsize(model_path) > 0:
                print("✓ trained_vae_model.pth downloaded and verified")
            else:
                raise Exception("trained_vae_model.pth download verification failed")
                
            if os.path.exists(config_path) and os.path.getsize(config_path) > 0:
                print("✓ vae_config.properties downloaded and verified")
            else:
                raise Exception("vae_config.properties download verification failed")
                
            print("VAE signature failure inference files ready for KServe deployment")
                
        except requests.exceptions.Timeout:
            print("Error: Request timed out while downloading VAE files from CDN")
            exit(1)
        except requests.exceptions.RequestException as e:
            print("Error: Network error during VAE download:", str(e))
            exit(1)
        except Exception as e:
            print("Error: Failed to download VAE files:", str(e))
            import traceback
            traceback.print_exc()
            exit(1)

    args:
      - --handler_url
      - {inputValue: handler_url}
      - --handler_file
      - {outputPath: handler_file}
      - --vae_model_url
      - {inputValue: vae_model_url}
      - --vae_model_file
      - {outputPath: vae_model_file}
      - --config_url
      - {inputValue: config_url}
      - --config_file
      - {outputPath: config_file}
